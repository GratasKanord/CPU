$date
	Fri Aug  8 16:52:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_32b_tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " cout $end
$var reg 32 # A [31:0] $end
$var reg 32 $ B [31:0] $end
$var reg 4 % opcode [3:0] $end
$scope module uut $end
$var wire 32 & A [31:0] $end
$var wire 32 ' B [31:0] $end
$var wire 4 ( opcode [3:0] $end
$var wire 32 ) result [31:0] $end
$var wire 1 " cout $end
$var wire 31 * carry_chain [30:0] $end
$scope begin mid_slice[1] $end
$scope module u_mid $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 - and_out $end
$var wire 1 . cin $end
$var wire 1 / cout $end
$var wire 1 0 nand_out $end
$var wire 1 1 nor_out $end
$var wire 4 2 opcode [3:0] $end
$var wire 1 3 or_out $end
$var wire 1 4 pass_a $end
$var wire 1 5 pass_b $end
$var wire 1 6 sum $end
$var wire 1 7 xnor_out $end
$var wire 1 8 xor_out $end
$var wire 1 9 zero_out $end
$var wire 1 : B_inverted $end
$var reg 1 ; result $end
$upscope $end
$upscope $end
$scope begin mid_slice[2] $end
$scope module u_mid $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 > and_out $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A nand_out $end
$var wire 1 B nor_out $end
$var wire 4 C opcode [3:0] $end
$var wire 1 D or_out $end
$var wire 1 E pass_a $end
$var wire 1 F pass_b $end
$var wire 1 G sum $end
$var wire 1 H xnor_out $end
$var wire 1 I xor_out $end
$var wire 1 J zero_out $end
$var wire 1 K B_inverted $end
$var reg 1 L result $end
$upscope $end
$upscope $end
$scope begin mid_slice[3] $end
$scope module u_mid $end
$var wire 1 M A $end
$var wire 1 N B $end
$var wire 1 O and_out $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R nand_out $end
$var wire 1 S nor_out $end
$var wire 4 T opcode [3:0] $end
$var wire 1 U or_out $end
$var wire 1 V pass_a $end
$var wire 1 W pass_b $end
$var wire 1 X sum $end
$var wire 1 Y xnor_out $end
$var wire 1 Z xor_out $end
$var wire 1 [ zero_out $end
$var wire 1 \ B_inverted $end
$var reg 1 ] result $end
$upscope $end
$upscope $end
$scope begin mid_slice[4] $end
$scope module u_mid $end
$var wire 1 ^ A $end
$var wire 1 _ B $end
$var wire 1 ` and_out $end
$var wire 1 a cin $end
$var wire 1 b cout $end
$var wire 1 c nand_out $end
$var wire 1 d nor_out $end
$var wire 4 e opcode [3:0] $end
$var wire 1 f or_out $end
$var wire 1 g pass_a $end
$var wire 1 h pass_b $end
$var wire 1 i sum $end
$var wire 1 j xnor_out $end
$var wire 1 k xor_out $end
$var wire 1 l zero_out $end
$var wire 1 m B_inverted $end
$var reg 1 n result $end
$upscope $end
$upscope $end
$scope begin mid_slice[5] $end
$scope module u_mid $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 q and_out $end
$var wire 1 r cin $end
$var wire 1 s cout $end
$var wire 1 t nand_out $end
$var wire 1 u nor_out $end
$var wire 4 v opcode [3:0] $end
$var wire 1 w or_out $end
$var wire 1 x pass_a $end
$var wire 1 y pass_b $end
$var wire 1 z sum $end
$var wire 1 { xnor_out $end
$var wire 1 | xor_out $end
$var wire 1 } zero_out $end
$var wire 1 ~ B_inverted $end
$var reg 1 !" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[6] $end
$scope module u_mid $end
$var wire 1 "" A $end
$var wire 1 #" B $end
$var wire 1 $" and_out $end
$var wire 1 %" cin $end
$var wire 1 &" cout $end
$var wire 1 '" nand_out $end
$var wire 1 (" nor_out $end
$var wire 4 )" opcode [3:0] $end
$var wire 1 *" or_out $end
$var wire 1 +" pass_a $end
$var wire 1 ," pass_b $end
$var wire 1 -" sum $end
$var wire 1 ." xnor_out $end
$var wire 1 /" xor_out $end
$var wire 1 0" zero_out $end
$var wire 1 1" B_inverted $end
$var reg 1 2" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[7] $end
$scope module u_mid $end
$var wire 1 3" A $end
$var wire 1 4" B $end
$var wire 1 5" and_out $end
$var wire 1 6" cin $end
$var wire 1 7" cout $end
$var wire 1 8" nand_out $end
$var wire 1 9" nor_out $end
$var wire 4 :" opcode [3:0] $end
$var wire 1 ;" or_out $end
$var wire 1 <" pass_a $end
$var wire 1 =" pass_b $end
$var wire 1 >" sum $end
$var wire 1 ?" xnor_out $end
$var wire 1 @" xor_out $end
$var wire 1 A" zero_out $end
$var wire 1 B" B_inverted $end
$var reg 1 C" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[8] $end
$scope module u_mid $end
$var wire 1 D" A $end
$var wire 1 E" B $end
$var wire 1 F" and_out $end
$var wire 1 G" cin $end
$var wire 1 H" cout $end
$var wire 1 I" nand_out $end
$var wire 1 J" nor_out $end
$var wire 4 K" opcode [3:0] $end
$var wire 1 L" or_out $end
$var wire 1 M" pass_a $end
$var wire 1 N" pass_b $end
$var wire 1 O" sum $end
$var wire 1 P" xnor_out $end
$var wire 1 Q" xor_out $end
$var wire 1 R" zero_out $end
$var wire 1 S" B_inverted $end
$var reg 1 T" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[9] $end
$scope module u_mid $end
$var wire 1 U" A $end
$var wire 1 V" B $end
$var wire 1 W" and_out $end
$var wire 1 X" cin $end
$var wire 1 Y" cout $end
$var wire 1 Z" nand_out $end
$var wire 1 [" nor_out $end
$var wire 4 \" opcode [3:0] $end
$var wire 1 ]" or_out $end
$var wire 1 ^" pass_a $end
$var wire 1 _" pass_b $end
$var wire 1 `" sum $end
$var wire 1 a" xnor_out $end
$var wire 1 b" xor_out $end
$var wire 1 c" zero_out $end
$var wire 1 d" B_inverted $end
$var reg 1 e" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[10] $end
$scope module u_mid $end
$var wire 1 f" A $end
$var wire 1 g" B $end
$var wire 1 h" and_out $end
$var wire 1 i" cin $end
$var wire 1 j" cout $end
$var wire 1 k" nand_out $end
$var wire 1 l" nor_out $end
$var wire 4 m" opcode [3:0] $end
$var wire 1 n" or_out $end
$var wire 1 o" pass_a $end
$var wire 1 p" pass_b $end
$var wire 1 q" sum $end
$var wire 1 r" xnor_out $end
$var wire 1 s" xor_out $end
$var wire 1 t" zero_out $end
$var wire 1 u" B_inverted $end
$var reg 1 v" result $end
$upscope $end
$upscope $end
$scope begin mid_slice[11] $end
$scope module u_mid $end
$var wire 1 w" A $end
$var wire 1 x" B $end
$var wire 1 y" and_out $end
$var wire 1 z" cin $end
$var wire 1 {" cout $end
$var wire 1 |" nand_out $end
$var wire 1 }" nor_out $end
$var wire 4 ~" opcode [3:0] $end
$var wire 1 !# or_out $end
$var wire 1 "# pass_a $end
$var wire 1 ## pass_b $end
$var wire 1 $# sum $end
$var wire 1 %# xnor_out $end
$var wire 1 &# xor_out $end
$var wire 1 '# zero_out $end
$var wire 1 (# B_inverted $end
$var reg 1 )# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[12] $end
$scope module u_mid $end
$var wire 1 *# A $end
$var wire 1 +# B $end
$var wire 1 ,# and_out $end
$var wire 1 -# cin $end
$var wire 1 .# cout $end
$var wire 1 /# nand_out $end
$var wire 1 0# nor_out $end
$var wire 4 1# opcode [3:0] $end
$var wire 1 2# or_out $end
$var wire 1 3# pass_a $end
$var wire 1 4# pass_b $end
$var wire 1 5# sum $end
$var wire 1 6# xnor_out $end
$var wire 1 7# xor_out $end
$var wire 1 8# zero_out $end
$var wire 1 9# B_inverted $end
$var reg 1 :# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[13] $end
$scope module u_mid $end
$var wire 1 ;# A $end
$var wire 1 <# B $end
$var wire 1 =# and_out $end
$var wire 1 ># cin $end
$var wire 1 ?# cout $end
$var wire 1 @# nand_out $end
$var wire 1 A# nor_out $end
$var wire 4 B# opcode [3:0] $end
$var wire 1 C# or_out $end
$var wire 1 D# pass_a $end
$var wire 1 E# pass_b $end
$var wire 1 F# sum $end
$var wire 1 G# xnor_out $end
$var wire 1 H# xor_out $end
$var wire 1 I# zero_out $end
$var wire 1 J# B_inverted $end
$var reg 1 K# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[14] $end
$scope module u_mid $end
$var wire 1 L# A $end
$var wire 1 M# B $end
$var wire 1 N# and_out $end
$var wire 1 O# cin $end
$var wire 1 P# cout $end
$var wire 1 Q# nand_out $end
$var wire 1 R# nor_out $end
$var wire 4 S# opcode [3:0] $end
$var wire 1 T# or_out $end
$var wire 1 U# pass_a $end
$var wire 1 V# pass_b $end
$var wire 1 W# sum $end
$var wire 1 X# xnor_out $end
$var wire 1 Y# xor_out $end
$var wire 1 Z# zero_out $end
$var wire 1 [# B_inverted $end
$var reg 1 \# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[15] $end
$scope module u_mid $end
$var wire 1 ]# A $end
$var wire 1 ^# B $end
$var wire 1 _# and_out $end
$var wire 1 `# cin $end
$var wire 1 a# cout $end
$var wire 1 b# nand_out $end
$var wire 1 c# nor_out $end
$var wire 4 d# opcode [3:0] $end
$var wire 1 e# or_out $end
$var wire 1 f# pass_a $end
$var wire 1 g# pass_b $end
$var wire 1 h# sum $end
$var wire 1 i# xnor_out $end
$var wire 1 j# xor_out $end
$var wire 1 k# zero_out $end
$var wire 1 l# B_inverted $end
$var reg 1 m# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[16] $end
$scope module u_mid $end
$var wire 1 n# A $end
$var wire 1 o# B $end
$var wire 1 p# and_out $end
$var wire 1 q# cin $end
$var wire 1 r# cout $end
$var wire 1 s# nand_out $end
$var wire 1 t# nor_out $end
$var wire 4 u# opcode [3:0] $end
$var wire 1 v# or_out $end
$var wire 1 w# pass_a $end
$var wire 1 x# pass_b $end
$var wire 1 y# sum $end
$var wire 1 z# xnor_out $end
$var wire 1 {# xor_out $end
$var wire 1 |# zero_out $end
$var wire 1 }# B_inverted $end
$var reg 1 ~# result $end
$upscope $end
$upscope $end
$scope begin mid_slice[17] $end
$scope module u_mid $end
$var wire 1 !$ A $end
$var wire 1 "$ B $end
$var wire 1 #$ and_out $end
$var wire 1 $$ cin $end
$var wire 1 %$ cout $end
$var wire 1 &$ nand_out $end
$var wire 1 '$ nor_out $end
$var wire 4 ($ opcode [3:0] $end
$var wire 1 )$ or_out $end
$var wire 1 *$ pass_a $end
$var wire 1 +$ pass_b $end
$var wire 1 ,$ sum $end
$var wire 1 -$ xnor_out $end
$var wire 1 .$ xor_out $end
$var wire 1 /$ zero_out $end
$var wire 1 0$ B_inverted $end
$var reg 1 1$ result $end
$upscope $end
$upscope $end
$scope begin mid_slice[18] $end
$scope module u_mid $end
$var wire 1 2$ A $end
$var wire 1 3$ B $end
$var wire 1 4$ and_out $end
$var wire 1 5$ cin $end
$var wire 1 6$ cout $end
$var wire 1 7$ nand_out $end
$var wire 1 8$ nor_out $end
$var wire 4 9$ opcode [3:0] $end
$var wire 1 :$ or_out $end
$var wire 1 ;$ pass_a $end
$var wire 1 <$ pass_b $end
$var wire 1 =$ sum $end
$var wire 1 >$ xnor_out $end
$var wire 1 ?$ xor_out $end
$var wire 1 @$ zero_out $end
$var wire 1 A$ B_inverted $end
$var reg 1 B$ result $end
$upscope $end
$upscope $end
$scope begin mid_slice[19] $end
$scope module u_mid $end
$var wire 1 C$ A $end
$var wire 1 D$ B $end
$var wire 1 E$ and_out $end
$var wire 1 F$ cin $end
$var wire 1 G$ cout $end
$var wire 1 H$ nand_out $end
$var wire 1 I$ nor_out $end
$var wire 4 J$ opcode [3:0] $end
$var wire 1 K$ or_out $end
$var wire 1 L$ pass_a $end
$var wire 1 M$ pass_b $end
$var wire 1 N$ sum $end
$var wire 1 O$ xnor_out $end
$var wire 1 P$ xor_out $end
$var wire 1 Q$ zero_out $end
$var wire 1 R$ B_inverted $end
$var reg 1 S$ result $end
$upscope $end
$upscope $end
$scope begin mid_slice[20] $end
$scope module u_mid $end
$var wire 1 T$ A $end
$var wire 1 U$ B $end
$var wire 1 V$ and_out $end
$var wire 1 W$ cin $end
$var wire 1 X$ cout $end
$var wire 1 Y$ nand_out $end
$var wire 1 Z$ nor_out $end
$var wire 4 [$ opcode [3:0] $end
$var wire 1 \$ or_out $end
$var wire 1 ]$ pass_a $end
$var wire 1 ^$ pass_b $end
$var wire 1 _$ sum $end
$var wire 1 `$ xnor_out $end
$var wire 1 a$ xor_out $end
$var wire 1 b$ zero_out $end
$var wire 1 c$ B_inverted $end
$var reg 1 d$ result $end
$upscope $end
$upscope $end
$scope begin mid_slice[21] $end
$scope module u_mid $end
$var wire 1 e$ A $end
$var wire 1 f$ B $end
$var wire 1 g$ and_out $end
$var wire 1 h$ cin $end
$var wire 1 i$ cout $end
$var wire 1 j$ nand_out $end
$var wire 1 k$ nor_out $end
$var wire 4 l$ opcode [3:0] $end
$var wire 1 m$ or_out $end
$var wire 1 n$ pass_a $end
$var wire 1 o$ pass_b $end
$var wire 1 p$ sum $end
$var wire 1 q$ xnor_out $end
$var wire 1 r$ xor_out $end
$var wire 1 s$ zero_out $end
$var wire 1 t$ B_inverted $end
$var reg 1 u$ result $end
$upscope $end
$upscope $end
$scope begin mid_slice[22] $end
$scope module u_mid $end
$var wire 1 v$ A $end
$var wire 1 w$ B $end
$var wire 1 x$ and_out $end
$var wire 1 y$ cin $end
$var wire 1 z$ cout $end
$var wire 1 {$ nand_out $end
$var wire 1 |$ nor_out $end
$var wire 4 }$ opcode [3:0] $end
$var wire 1 ~$ or_out $end
$var wire 1 !% pass_a $end
$var wire 1 "% pass_b $end
$var wire 1 #% sum $end
$var wire 1 $% xnor_out $end
$var wire 1 %% xor_out $end
$var wire 1 &% zero_out $end
$var wire 1 '% B_inverted $end
$var reg 1 (% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[23] $end
$scope module u_mid $end
$var wire 1 )% A $end
$var wire 1 *% B $end
$var wire 1 +% and_out $end
$var wire 1 ,% cin $end
$var wire 1 -% cout $end
$var wire 1 .% nand_out $end
$var wire 1 /% nor_out $end
$var wire 4 0% opcode [3:0] $end
$var wire 1 1% or_out $end
$var wire 1 2% pass_a $end
$var wire 1 3% pass_b $end
$var wire 1 4% sum $end
$var wire 1 5% xnor_out $end
$var wire 1 6% xor_out $end
$var wire 1 7% zero_out $end
$var wire 1 8% B_inverted $end
$var reg 1 9% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[24] $end
$scope module u_mid $end
$var wire 1 :% A $end
$var wire 1 ;% B $end
$var wire 1 <% and_out $end
$var wire 1 =% cin $end
$var wire 1 >% cout $end
$var wire 1 ?% nand_out $end
$var wire 1 @% nor_out $end
$var wire 4 A% opcode [3:0] $end
$var wire 1 B% or_out $end
$var wire 1 C% pass_a $end
$var wire 1 D% pass_b $end
$var wire 1 E% sum $end
$var wire 1 F% xnor_out $end
$var wire 1 G% xor_out $end
$var wire 1 H% zero_out $end
$var wire 1 I% B_inverted $end
$var reg 1 J% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[25] $end
$scope module u_mid $end
$var wire 1 K% A $end
$var wire 1 L% B $end
$var wire 1 M% and_out $end
$var wire 1 N% cin $end
$var wire 1 O% cout $end
$var wire 1 P% nand_out $end
$var wire 1 Q% nor_out $end
$var wire 4 R% opcode [3:0] $end
$var wire 1 S% or_out $end
$var wire 1 T% pass_a $end
$var wire 1 U% pass_b $end
$var wire 1 V% sum $end
$var wire 1 W% xnor_out $end
$var wire 1 X% xor_out $end
$var wire 1 Y% zero_out $end
$var wire 1 Z% B_inverted $end
$var reg 1 [% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[26] $end
$scope module u_mid $end
$var wire 1 \% A $end
$var wire 1 ]% B $end
$var wire 1 ^% and_out $end
$var wire 1 _% cin $end
$var wire 1 `% cout $end
$var wire 1 a% nand_out $end
$var wire 1 b% nor_out $end
$var wire 4 c% opcode [3:0] $end
$var wire 1 d% or_out $end
$var wire 1 e% pass_a $end
$var wire 1 f% pass_b $end
$var wire 1 g% sum $end
$var wire 1 h% xnor_out $end
$var wire 1 i% xor_out $end
$var wire 1 j% zero_out $end
$var wire 1 k% B_inverted $end
$var reg 1 l% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[27] $end
$scope module u_mid $end
$var wire 1 m% A $end
$var wire 1 n% B $end
$var wire 1 o% and_out $end
$var wire 1 p% cin $end
$var wire 1 q% cout $end
$var wire 1 r% nand_out $end
$var wire 1 s% nor_out $end
$var wire 4 t% opcode [3:0] $end
$var wire 1 u% or_out $end
$var wire 1 v% pass_a $end
$var wire 1 w% pass_b $end
$var wire 1 x% sum $end
$var wire 1 y% xnor_out $end
$var wire 1 z% xor_out $end
$var wire 1 {% zero_out $end
$var wire 1 |% B_inverted $end
$var reg 1 }% result $end
$upscope $end
$upscope $end
$scope begin mid_slice[28] $end
$scope module u_mid $end
$var wire 1 ~% A $end
$var wire 1 !& B $end
$var wire 1 "& and_out $end
$var wire 1 #& cin $end
$var wire 1 $& cout $end
$var wire 1 %& nand_out $end
$var wire 1 && nor_out $end
$var wire 4 '& opcode [3:0] $end
$var wire 1 (& or_out $end
$var wire 1 )& pass_a $end
$var wire 1 *& pass_b $end
$var wire 1 +& sum $end
$var wire 1 ,& xnor_out $end
$var wire 1 -& xor_out $end
$var wire 1 .& zero_out $end
$var wire 1 /& B_inverted $end
$var reg 1 0& result $end
$upscope $end
$upscope $end
$scope begin mid_slice[29] $end
$scope module u_mid $end
$var wire 1 1& A $end
$var wire 1 2& B $end
$var wire 1 3& and_out $end
$var wire 1 4& cin $end
$var wire 1 5& cout $end
$var wire 1 6& nand_out $end
$var wire 1 7& nor_out $end
$var wire 4 8& opcode [3:0] $end
$var wire 1 9& or_out $end
$var wire 1 :& pass_a $end
$var wire 1 ;& pass_b $end
$var wire 1 <& sum $end
$var wire 1 =& xnor_out $end
$var wire 1 >& xor_out $end
$var wire 1 ?& zero_out $end
$var wire 1 @& B_inverted $end
$var reg 1 A& result $end
$upscope $end
$upscope $end
$scope begin mid_slice[30] $end
$scope module u_mid $end
$var wire 1 B& A $end
$var wire 1 C& B $end
$var wire 1 D& and_out $end
$var wire 1 E& cin $end
$var wire 1 F& cout $end
$var wire 1 G& nand_out $end
$var wire 1 H& nor_out $end
$var wire 4 I& opcode [3:0] $end
$var wire 1 J& or_out $end
$var wire 1 K& pass_a $end
$var wire 1 L& pass_b $end
$var wire 1 M& sum $end
$var wire 1 N& xnor_out $end
$var wire 1 O& xor_out $end
$var wire 1 P& zero_out $end
$var wire 1 Q& B_inverted $end
$var reg 1 R& result $end
$upscope $end
$upscope $end
$scope module u_lsb $end
$var wire 1 S& A $end
$var wire 1 T& B $end
$var wire 1 U& and_out $end
$var wire 1 V& cout $end
$var wire 1 W& nand_out $end
$var wire 1 X& nor_out $end
$var wire 4 Y& opcode [3:0] $end
$var wire 1 Z& or_out $end
$var wire 1 [& pass_a $end
$var wire 1 \& pass_b $end
$var wire 1 ]& sum $end
$var wire 1 ^& xnor_out $end
$var wire 1 _& xor_out $end
$var wire 1 `& zero_out $end
$var wire 1 a& cin $end
$var wire 1 b& B_inverted $end
$var reg 1 c& result $end
$upscope $end
$scope module u_msb $end
$var wire 1 d& A $end
$var wire 1 e& B $end
$var wire 1 f& and_out $end
$var wire 1 g& cin $end
$var wire 1 " cout $end
$var wire 1 h& nand_out $end
$var wire 1 i& nor_out $end
$var wire 4 j& opcode [3:0] $end
$var wire 1 k& or_out $end
$var wire 1 l& overflow $end
$var wire 1 m& pass_a $end
$var wire 1 n& pass_b $end
$var wire 1 o& slt_out $end
$var wire 1 p& sltu_out $end
$var wire 1 q& sum $end
$var wire 1 r& xnor_out $end
$var wire 1 s& xor_out $end
$var wire 1 t& zero_out $end
$var wire 1 u& B_inverted $end
$var reg 1 v& result $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0v&
0u&
0t&
0s&
1r&
0q&
1p&
0o&
0n&
0m&
0l&
0k&
b0 j&
1i&
1h&
0g&
0f&
0e&
0d&
0c&
1b&
0a&
0`&
0_&
1^&
0]&
1\&
1[&
1Z&
b0 Y&
0X&
0W&
1V&
1U&
1T&
1S&
0R&
0Q&
0P&
0O&
1N&
0M&
0L&
0K&
0J&
b0 I&
1H&
1G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
1=&
0<&
0;&
0:&
09&
b0 8&
17&
16&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
1,&
0+&
0*&
0)&
0(&
b0 '&
1&&
1%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
1y%
0x%
0w%
0v%
0u%
b0 t%
1s%
1r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
1h%
0g%
0f%
0e%
0d%
b0 c%
1b%
1a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
1W%
0V%
0U%
0T%
0S%
b0 R%
1Q%
1P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
1F%
0E%
0D%
0C%
0B%
b0 A%
1@%
1?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
15%
04%
03%
02%
01%
b0 0%
1/%
1.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
1$%
0#%
0"%
0!%
0~$
b0 }$
1|$
1{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
1q$
0p$
0o$
0n$
0m$
b0 l$
1k$
1j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
1`$
0_$
0^$
0]$
0\$
b0 [$
1Z$
1Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
1O$
0N$
0M$
0L$
0K$
b0 J$
1I$
1H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
1>$
0=$
0<$
0;$
0:$
b0 9$
18$
17$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
1-$
0,$
0+$
0*$
0)$
b0 ($
1'$
1&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
1z#
0y#
0x#
0w#
0v#
b0 u#
1t#
1s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
1i#
0h#
0g#
0f#
0e#
b0 d#
1c#
1b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
1X#
0W#
0V#
0U#
0T#
b0 S#
1R#
1Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
1G#
0F#
0E#
0D#
0C#
b0 B#
1A#
1@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
16#
05#
04#
03#
02#
b0 1#
10#
1/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
1%#
0$#
0##
0"#
0!#
b0 ~"
1}"
1|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
1r"
0q"
0p"
0o"
0n"
b0 m"
1l"
1k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
1a"
0`"
0_"
0^"
0]"
b0 \"
1["
1Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
1P"
0O"
0N"
0M"
0L"
b0 K"
1J"
1I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
1?"
0>"
0="
0<"
0;"
b0 :"
19"
18"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
1."
0-"
0,"
0+"
0*"
b0 )"
1("
1'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
1{
0z
0y
0x
0w
b0 v
1u
1t
0s
0r
0q
0p
0o
0n
0m
0l
0k
1j
0i
0h
0g
0f
b0 e
1d
1c
0b
0a
0`
0_
0^
1]
0\
0[
0Z
1Y
1X
0W
0V
0U
b0 T
1S
1R
0Q
1P
0O
0N
0M
0L
0K
0J
1I
0H
0G
0F
1E
1D
b0 C
0B
1A
1@
1?
0>
0=
1<
0;
1:
09
18
07
06
15
04
13
b0 2
01
10
1/
1.
0-
1,
0+
b111 *
b1000 )
b0 (
b11 '
b101 &
b0 %
b11 $
b101 #
0"
b1000 !
$end
#10000
0p&
1"
0l&
1g&
1F&
1E&
15&
14&
1$&
1#&
1q%
1p%
1`%
1_%
1O%
1N%
1>%
1=%
1-%
1,%
1z$
1y$
1i$
1h$
1X$
1W$
1G$
1F$
16$
15$
1%$
1$$
1r#
1q#
1a#
1`#
1P#
1O#
1?#
1>#
1.#
1-#
1{"
1z"
1j"
1i"
1Y"
1X"
1H"
1G"
17"
16"
1&"
1%"
0]
1s
0X
0P
1r
0?
0@
0L
1b
1;
0/
0G
16
1a
0n
0!"
02"
0C"
0T"
0e"
0v"
0)#
0:#
0K#
0\#
0m#
0~#
01$
0B$
0S$
0d$
0u$
0(%
09%
0J%
0[%
0l%
0}%
00&
0A&
0R&
0.
0o&
0v&
17
00
0S
0Y
b11 !
b11 )
1c&
0^&
1W&
1Q
0i
0z
0-"
0>"
0O"
0`"
0q"
0$#
05#
0F#
0W#
0h#
0y#
0,$
0=$
0N$
0_$
0p$
0#%
04%
0E%
0V%
0g%
0x%
0+&
0<&
0M&
b1111111111111111111111111111000 *
0V&
1]&
0q&
1-
08
1U
1Z
0U&
1_&
1a&
1F
1=
14
1+
0E
0<
1V
1M
0[&
0S&
0:
0K
1\
1m
1~
11"
1B"
1S"
1d"
1u"
1(#
19#
1J#
1[#
1l#
1}#
10$
1A$
1R$
1c$
1t$
1'%
18%
1I%
1Z%
1k%
1|%
1/&
1@&
1Q&
0b&
1u&
b111 $
b111 '
b1010 #
b1010 &
b1 %
b1 (
b1 2
b1 C
b1 T
b1 e
b1 v
b1 )"
b1 :"
b1 K"
b1 \"
b1 m"
b1 ~"
b1 1#
b1 B#
b1 S#
b1 d#
b1 u#
b1 ($
b1 9$
b1 J$
b1 [$
b1 l$
b1 }$
b1 0%
b1 A%
b1 R%
b1 c%
b1 t%
b1 '&
b1 8&
b1 I&
b1 Y&
b1 j&
#20000
1o&
0q#
0=%
1p&
0G"
0a#
0-%
0"
07"
1h#
14%
1q&
0l&
1>"
0`#
0,%
0g&
06"
0P#
0z$
0F&
0&"
1W#
1#%
1M&
1-"
0O#
0y$
0E&
0%"
0?#
0i$
05&
0s
1F#
1p$
1<&
1z
0>#
0h$
04&
0r
0.#
0X$
0$&
0b
15#
1_$
1+&
1i
0X"
0i"
0z"
0-#
0$$
05$
0F$
0W$
0N%
0_%
0p%
0#&
1X
0a
0H"
0Y"
0j"
0{"
0r#
0%$
06$
0G$
0>%
0O%
0`%
0q%
0J"
0P"
0["
0a"
0l"
0r"
0}"
0%#
0t#
0z#
0'$
0-$
08$
0>$
0I$
0O$
0@%
0F%
0Q%
0W%
0b%
0h%
0s%
0y%
0;
07
10
0d
0j
0u
0{
0("
0."
09"
0?"
00#
06#
0A#
0G#
0R#
0X#
0c#
0i#
0Z$
0`$
0k$
0q$
0|$
0$%
0/%
05%
0&&
0,&
07&
0=&
0H&
0N&
0i&
0r&
1G
b0 *
0Q
1O"
1`"
1q"
1$#
1y#
1,$
1=$
1N$
1E%
1V%
1g%
1x%
1L"
1Q"
1]"
1b"
1n"
1s"
1!#
1&#
1v#
1{#
1)$
1.$
1:$
1?$
1K$
1P$
1B%
1G%
1S%
1X%
1d%
1i%
1u%
1z%
0-
18
1f
1k
1w
1|
1*"
1/"
1;"
1@"
12#
17#
1C#
1H#
1T#
1Y#
1e#
1j#
1\$
1a$
1m$
1r$
1~$
1%%
11%
16%
1(&
1-&
19&
1>&
1J&
1O&
1k&
1s&
0a&
1W
1N
1N"
1E"
1_"
1V"
1p"
1g"
1##
1x"
1x#
1o#
1+$
1"$
1<$
13$
1M$
1D$
1D%
1;%
1U%
1L%
1f%
1]%
1w%
1n%
04
0+
0V
0M
1g
1^
1x
1o
1+"
1""
1<"
13"
13#
1*#
1D#
1;#
1U#
1L#
1f#
1]#
1]$
1T$
1n$
1e$
1!%
1v$
12%
1)%
1)&
1~%
1:&
11&
1K&
1B&
1m&
1d&
1:
1K
1\
0m
0~
01"
0B"
1S"
1d"
1u"
1(#
09#
0J#
0[#
0l#
1}#
10$
1A$
1R$
0c$
0t$
0'%
08%
1I%
1Z%
1k%
1|%
0/&
0@&
0Q&
b0 !
b0 )
0c&
1b&
0u&
b1111000011110000111100001111 $
b1111000011110000111100001111 '
b11110000111100001111000011110000 #
b11110000111100001111000011110000 &
b10 %
b10 (
b10 2
b10 C
b10 T
b10 e
b10 v
b10 )"
b10 :"
b10 K"
b10 \"
b10 m"
b10 ~"
b10 1#
b10 B#
b10 S#
b10 d#
b10 u#
b10 ($
b10 9$
b10 J$
b10 [$
b10 l$
b10 }$
b10 0%
b10 A%
b10 R%
b10 c%
b10 t%
b10 '&
b10 8&
b10 I&
b10 Y&
b10 j&
#30000
0X"
0$$
0N%
0H"
0r#
0>%
1O"
1y#
1E%
1o&
0G"
0q#
0=%
1p&
07"
0a#
0-%
0"
1>"
1h#
14%
1q&
0l&
06"
0`#
0,%
0g&
0&"
0P#
0z$
0F&
0%"
0O#
0y$
0E&
0s
0?#
0i$
05&
1z
1F#
1p$
1<&
0P
0z"
0F$
0p%
0r
0>#
0h$
04&
0@
0j"
06$
0`%
0b
0.#
0X$
0$&
1G
1q"
1=$
1g%
0?
0a
0i"
0-#
05$
0W$
0_%
0#&
16
0/
1X
0Q
1i
1-"
1`"
0Y"
1$#
0{"
15#
1W#
1,$
0%$
1N$
0G$
1_$
1#%
1V%
0O%
1x%
b0 *
0q%
1+&
1M&
0:
0\
1m
11"
0d"
0(#
19#
1[#
00$
0R$
1c$
1'%
0Z%
0|%
1/&
1Q&
05
0,
0W
0N
1h
1_
1,"
1#"
0_"
0V"
0##
0x"
14#
1+#
1V#
1M#
0+$
0"$
0M$
0D$
1^$
1U$
1"%
1w$
0U%
0L%
0w%
0n%
1*&
1!&
1L&
1C&
14
1+
1V
1M
0g
0^
0+"
0""
1^"
1U"
1"#
1w"
03#
0*#
0U#
0L#
1*$
1!$
1L$
1C$
0]$
0T$
0!%
0v$
1T%
1K%
1v%
1m%
0)&
0~%
0K&
0B&
1;
1L
1]
1n
1!"
12"
1C"
1T"
1e"
1v"
1)#
1:#
1K#
1\#
1m#
1~#
11$
1B$
1S$
1d$
1u$
1(%
19%
1J%
1[%
1l%
1}%
10&
1A&
1R&
1c&
b11111111111111111111111111111111 !
b11111111111111111111111111111111 )
1v&
b1010101010101010101010101010101 $
b1010101010101010101010101010101 '
b10101010101010101010101010101010 #
b10101010101010101010101010101010 &
b11 %
b11 (
b11 2
b11 C
b11 T
b11 e
b11 v
b11 )"
b11 :"
b11 K"
b11 \"
b11 m"
b11 ~"
b11 1#
b11 B#
b11 S#
b11 d#
b11 u#
b11 ($
b11 9$
b11 J$
b11 [$
b11 l$
b11 }$
b11 0%
b11 A%
b11 R%
b11 c%
b11 t%
b11 '&
b11 8&
b11 I&
b11 Y&
b11 j&
#40000
